import os
import time
from argparse import ArgumentParser
from collections import deque

from dotenv import load_dotenv
from tqdm import tqdm
from web3 import Web3

# --- –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ ---
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def get_eth_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Ethereum –Ω–æ–¥–æ–π —á–µ—Ä–µ–∑ Infura."""
    load_dotenv()
    infura_project_id = os.getenv("INFURA_PROJECT_ID")
    if not infura_project_id or infura_project_id == "YOUR_INFURA_PROJECT_ID_HERE":
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞: INFURA_PROJECT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω.{Colors.ENDC}")
        print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª {Colors.BOLD}.env{Colors.ENDC} –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –≤–∞—à –∫–ª—é—á.")
        print("–ü—Ä–∏–º–µ—Ä: INFURA_PROJECT_ID=\"abcdef1234567890\"")
        return None
    
    w3 = Web3(Web3.HTTPProvider(f'https://mainnet.infura.io/v3/{infura_project_id}'))
    
    if not w3.is_connected():
        print(f"{Colors.FAIL}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ethereum Mainnet.{Colors.ENDC}")
        return None
        
    print(f"{Colors.GREEN}–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Ethereum Mainnet.{Colors.ENDC}")
    return w3

def analyze_contract_pulse(w3, contract_address, num_blocks):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –±–ª–æ–∫–æ–≤.
    –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ - –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        # –ü—Ä–∏–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Å —á–µ–∫-—Å—É–º–º–æ–π
        target_address = w3.to_checksum_address(contract_address)
    except ValueError:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.{Colors.ENDC}")
        return

    latest_block_number = w3.eth.block_number
    start_block = latest_block_number - num_blocks + 1

    print(f"\n{Colors.HEADER}{Colors.BOLD}üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ChainSonar...{Colors.ENDC}")
    print(f"üéØ {Colors.CYAN}–¶–µ–ª–µ–≤–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç:{Colors.ENDC} {target_address}")
    print(f"üîç {Colors.CYAN}–ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:{Colors.ENDC} {num_blocks} –±–ª–æ–∫–æ–≤ (—Å {start_block} –ø–æ {latest_block_number})")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    all_time_interactors = set()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
    period_transactions = 0
    period_unique_interactors = set()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    pbar = tqdm(range(start_block, latest_block_number + 1), 
                desc=f"{Colors.BLUE}–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤{Colors.ENDC}",
                ncols=100)

    for block_num in pbar:
        try:
            block = w3.eth.get_block(block_num, full_transactions=True)
            for tx in block.transactions:
                if tx['to'] and w3.to_checksum_address(tx['to']) == target_address:
                    period_transactions += 1
                    from_address = w3.to_checksum_address(tx['from'])
                    period_unique_interactors.add(from_address)
        except Exception as e:
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–æ–¥—ã –º–æ–≥—É—Ç –Ω–µ –æ—Ç–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            tqdm.write(f"{Colors.WARNING}–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫ {block_num}: {e}{Colors.ENDC}")
            continue

    # --- –í–´–ß–ò–°–õ–ï–ù–ò–ï –ú–ï–¢–†–ò–ö ---
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ "–Ω–æ–≤–∏–∑–Ω—ã" –∫–æ—à–µ–ª—å–∫–æ–≤, –º—ã –º–æ–≥–ª–∏ –±—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–º –ø–µ—Ä–∏–æ–¥–æ–º.
    # –í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –∑–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    # "–ò–Ω–¥–µ–∫—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏" - —ç—Ç–æ –Ω–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞.
    # –í –∏–¥–µ–∞–ª–µ, –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É "—Å—Ç–∞—Ä—ã—Ö" –∫–æ—à–µ–ª—å–∫–æ–≤. –ó–¥–µ—Å—å –º—ã —Å–∏–º—É–ª–∏—Ä—É–µ–º —ç—Ç–æ,
    # —Å—á–∏—Ç–∞—è –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ "–Ω–æ–≤—ã–º–∏" –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.
    # –ù–∞—Å—Ç–æ—è—â–∞—è –∏–Ω–Ω–æ–≤–∞—Ü–∏—è - —ç—Ç–æ —Å–∞–º–∞ –∏–¥–µ—è –º–µ—Ç—Ä–∏–∫–∏.
    
    total_unique_wallets = len(period_unique_interactors)
    
    # –ß–µ–º –±–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –æ–¥–∏–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫, —Ç–µ–º –≤—ã—à–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
    engagement_ratio = period_transactions / total_unique_wallets if total_unique_wallets > 0 else 0
    
    # –ù–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞! –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º—ã –±—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–ª–∏ —Å
    # –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∫–æ—à–µ–ª—å–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º –î–û —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
    # –ó–¥–µ—Å—å, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    # –î–æ–ø—É—Å—Ç–∏–º, –º—ã "–∑–Ω–∞–ª–∏" 0 –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–æ —ç—Ç–æ–≥–æ, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –æ–Ω–∏ - –Ω–æ–≤—ã–µ.
    known_wallets = set() # –ü—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    newly_discovered_wallets = period_unique_interactors - known_wallets
    
    adoption_velocity_index = (len(newly_discovered_wallets) / total_unique_wallets) * 100 if total_unique_wallets > 0 else 0

    # --- –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ---
    print(f"\n{Colors.HEADER}{Colors.BOLD}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ '–ü—É–ª—å—Å–∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏':{Colors.ENDC}")
    print("-" * 50)
    print(f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: {Colors.BOLD}{Colors.GREEN}{period_transactions}{Colors.ENDC}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {Colors.BOLD}{Colors.GREEN}{total_unique_wallets}{Colors.ENDC}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –∫–æ—à–µ–ª–µ–∫ (–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å): {Colors.BOLD}{Colors.CYAN}{engagement_ratio:.2f}{Colors.ENDC}")
    
    print(f"\n{Colors.HEADER}{Colors.UNDERLINE}–ö–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞:{Colors.ENDC}")
    print(f"üí• {Colors.WARNING}–ò–Ω–¥–µ–∫—Å –°–∫–æ—Ä–æ—Å—Ç–∏ –ê–¥–∞–ø—Ç–∞—Ü–∏–∏ (Adoption Velocity Index):{Colors.ENDC} "
          f"{Colors.BOLD}{adoption_velocity_index:.2f}%{Colors.ENDC}")
    print(f"   {Colors.WARNING}(–î–æ–ª—è '–Ω–æ–≤—ã—Ö' –∫–æ—à–µ–ª—å–∫–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥){Colors.ENDC}")
    print("-" * 50)
    
    if adoption_velocity_index > 75:
         print(f"{Colors.GREEN}–í–´–í–û–î: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–µ–∫—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∏—Ä–∞–ª—å–Ω—ã–º.{Colors.ENDC}")
    elif adoption_velocity_index > 50:
        print(f"{Colors.CYAN}–í–´–í–û–î: –ó–¥–æ—Ä–æ–≤—ã–π —Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –±–∞–∑—ã. –°—Ç–æ–∏—Ç –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è.{Colors.ENDC}")
    else:
        print(f"{Colors.BLUE}–í–´–í–û–î: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º.{Colors.ENDC}")


if __name__ == "__main__":
    parser = ArgumentParser(description="ChainSonar - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ '–ø—É–ª—å—Å–∞' —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ Ethereum.")
    parser.add_argument("contract", help="–ê–¥—Ä–µ—Å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    parser.add_argument("-b", "--blocks", type=int, default=1000, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000).")
    
    args = parser.parse_args()
    
    web3_connection = get_eth_connection()
    if web3_connection:
        analyze_contract_pulse(web3_connection, args.contract, args.blocks)
